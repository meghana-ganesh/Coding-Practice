//TIME COMPLEXITY:O(M^N) for each node m colours and there are n nodes
//SPACE COMPLEXITY: recursion stck - O(N) + O(N) - auxiliary color array space
class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool isPossible(bool graph[101][101],int n,int node,vector<int> &color,int i)
    {
        for(int k = 0;k < n;k++) //traverse for all adjacent nodes
        {
            if(k != node && graph[k][node] == 1 && color[k] == i)
            {
                return false;
            }
        }
        return true;
    }
    bool helper(bool graph[101][101],int m,int n,int node,vector<int> &color)
    {
        if(node == n)
            return true;
        for(int i=1;i<=m;i++)
        {
            if(isPossible(graph,n,node,color,i))
            {
                color[node] = i;
                if(helper(graph,m,n,node+1,color))
                    return true;
                color[node] = 0;
            }
        }
        return false;
    }
    bool graphColoring(bool graph[101][101], int m, int n) 
    {
        // your code here
        vector<int> color(n,0);
        return helper(graph,m,n,0,color);
    }
};
